{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2025-10-31T13:34:42.560Z",
    "end": "2025-10-31T13:34:48.151Z",
    "duration": 5591,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c58026e2-551f-44eb-8fd1-7fe7d1b96187",
      "title": "",
      "fullFile": "cypress\\e2e\\filtros.cy.js",
      "file": "cypress\\e2e\\filtros.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "508974d4-be04-40bd-a9d5-6a6c926d797a",
          "title": "FLX-006 - Filtragem e Ordenação de Produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TST-015 - Filtrar por critério (Price low→high e high→low)",
              "fullTitle": "FLX-006 - Filtragem e Ordenação de Produtos TST-015 - Filtrar por critério (Price low→high e high→low)",
              "timedOut": null,
              "duration": 1712,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/**\n * Dado que existem produtos com propriedades variadas  \n * quando aplicar filtro  \n * então somente produtos que atendam ao critério deverão ser exibidos\n */\n// verificar seletor existe\ncy.get(sortSelector).should('exist');\n// Price low -> high\ncy.get(sortSelector).select('lohi'); // ação que pode re-renderizar\n// re-query do seletor após a ação para evitar subject detached\ncy.get(sortSelector, {\n  timeout: 5000\n}).should('have.value', 'lohi');\ncy.get(activeOptionSelector, {\n  timeout: 5000\n}).should('contain.text', 'Price (low to high)');\n// garantir lista estabilizada\ncy.get('.inventory_item', {\n  timeout: 10000\n}).should('have.length.greaterThan', 0);\n// coletar e validar preços não-decrescentes\ncy.get('.inventory_item_price').then($prices => {\n  const vals = [...$prices].map(el => parsePrice(el.innerText));\n  expect(vals.length).to.be.greaterThan(0);\n  for (let i = 1; i < vals.length; i++) {\n    expect(vals[i], `price[${i}] >= price[${i - 1}]`).to.be.at.least(vals[i - 1]);\n  }\n});\n// Price high -> low\ncy.get(sortSelector).select('hilo');\ncy.get(sortSelector, {\n  timeout: 5000\n}).should('have.value', 'hilo');\ncy.get(activeOptionSelector, {\n  timeout: 5000\n}).should('contain.text', 'Price (high to low)');\ncy.get('.inventory_item', {\n  timeout: 10000\n}).should('have.length.greaterThan', 0);\ncy.get('.inventory_item_price').then($prices => {\n  const vals = [...$prices].map(el => parsePrice(el.innerText));\n  expect(vals.length).to.be.greaterThan(0);\n  for (let i = 1; i < vals.length; i++) {\n    expect(vals[i], `price[${i}] <= price[${i - 1}]`).to.be.at.most(vals[i - 1]);\n  }\n});",
              "err": {},
              "uuid": "b76cdb4b-9faa-4cef-b7ec-5bef31202ca4",
              "parentUUID": "508974d4-be04-40bd-a9d5-6a6c926d797a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TST-016 - Ordenação por preço e nome (lohi/hilo/az/za) valida sequência",
              "fullTitle": "FLX-006 - Filtragem e Ordenação de Produtos TST-016 - Ordenação por preço e nome (lohi/hilo/az/za) valida sequência",
              "timedOut": null,
              "duration": 2567,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/**\n * Dado que a listagem está visível \n * quando aplicar ordenação (ex.: price low→high)  \n * então a sequência dos itens deverá refletir o critério selecionado\n */\ncy.get(sortSelector).should('exist');\n// price low -> high (verificação por array)\ncy.get(sortSelector).select('lohi');\ncy.get(sortSelector, {\n  timeout: 5000\n}).should('have.value', 'lohi');\ncy.get('.inventory_item', {\n  timeout: 10000\n}).should('have.length.greaterThan', 0);\ncy.get('.inventory_item_price').then($prices => {\n  const vals = [...$prices].map(el => parsePrice(el.innerText));\n  const sorted = [...vals].sort((a, b) => a - b);\n  expect(vals).to.deep.equal(sorted);\n});\n// price high -> low\ncy.get(sortSelector).select('hilo');\ncy.get(sortSelector, {\n  timeout: 5000\n}).should('have.value', 'hilo');\ncy.get('.inventory_item_price').then($prices => {\n  const vals = [...$prices].map(el => parsePrice(el.innerText));\n  const sorted = [...vals].sort((a, b) => b - a);\n  expect(vals).to.deep.equal(sorted);\n});\n// name A -> Z\ncy.get(sortSelector).select('az');\ncy.get(sortSelector, {\n  timeout: 5000\n}).should('have.value', 'az');\ncy.get('.inventory_item_name').then($names => {\n  const vals = [...$names].map(el => el.innerText.trim().toLowerCase());\n  const sorted = [...vals].sort((a, b) => a.localeCompare(b));\n  expect(vals).to.deep.equal(sorted);\n});\n// name Z -> A\ncy.get(sortSelector).select('za');\ncy.get(sortSelector, {\n  timeout: 5000\n}).should('have.value', 'za');\ncy.get('.inventory_item_name').then($names => {\n  const vals = [...$names].map(el => el.innerText.trim().toLowerCase());\n  const sorted = [...vals].sort((a, b) => b.localeCompare(a));\n  expect(vals).to.deep.equal(sorted);\n});",
              "err": {},
              "uuid": "3af85006-b83c-48ea-b7a0-e7af7b0b5a54",
              "parentUUID": "508974d4-be04-40bd-a9d5-6a6c926d797a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b76cdb4b-9faa-4cef-b7ec-5bef31202ca4",
            "3af85006-b83c-48ea-b7a0-e7af7b0b5a54"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4279,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/results",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.3.0"
    }
  }
}